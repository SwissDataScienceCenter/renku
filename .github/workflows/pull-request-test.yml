name: Deploy and Test PR
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
      - edited
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-docs:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: install dependencies
        run: |
          sudo apt-get update -y && sudo apt-get install graphviz
          git submodule sync
          git submodule update --init --force docs/renku-python
          pip install --upgrade pip
          pip install -r docs/requirements.txt
      - name: test the docs build
        env:
          SIDEBAR: 1
        run: |
          cd docs
          sphinx-build -nNW -b spelling -d _build/doctrees . _build/spelling
          sphinx-build -qnNW . _build/html
      - name: Upload docs
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: docs
          path: docs/_build/html/
  check-deploy:
    runs-on: ubuntu-20.04
    outputs:
      pr-contains-string: ${{ steps.deploy-comment.outputs.pr-contains-string }}
      renku-core: ${{ steps.deploy-comment.outputs.renku-core}}
      renku-gateway: ${{ steps.deploy-comment.outputs.renku-gateway}}
      renku-graph: ${{ steps.deploy-comment.outputs.renku-graph}}
      renku-notebooks: ${{ steps.deploy-comment.outputs.renku-notebooks}}
      renku-ui: ${{ steps.deploy-comment.outputs.renku-ui}}
      test-enabled: ${{ steps.deploy-comment.outputs.test-enabled}}
      test-cypress-enabled: ${{ steps.deploy-comment.outputs.test-cypress-enabled}}
      extra-values: ${{ steps.deploy-comment.outputs.extra-values}}
      persist: ${{ steps.deploy-comment.outputs.persist }}
    steps:
      - uses: actions/checkout@v3
      - id: deploy-comment
        uses: SwissDataScienceCenter/renku-actions/check-pr-description@v1.4.5
        with:
          string: /deploy
          pr_ref: ${{ github.event.number }}
  deploy-pr:
    if: github.event.action != 'closed'
    needs: [check-deploy]
    runs-on: ubuntu-latest
    environment:
      name: ci-renku-${{ github.event.number }}
    steps:
      - uses: actions/checkout@v3
      - name: renku build and deploy
        if: needs.check-deploy.outputs.pr-contains-string == 'true'
        uses: SwissDataScienceCenter/renku-actions/deploy-renku@v1.4.5
        env:
          DOCKER_PASSWORD: ${{ secrets.RENKU_DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.RENKU_DOCKER_USERNAME }}
          GITLAB_TOKEN: ${{ secrets.DEV_GITLAB_TOKEN }}
          KUBECONFIG: "${{ github.workspace }}/renkubot-kube.config"
          RENKU_ANONYMOUS_SESSIONS: true
          RENKU_RELEASE: ci-renku-${{ github.event.number }}
          RENKU_VALUES_FILE: "${{ github.workspace }}/values.yaml"
          RENKU_VALUES: ${{ secrets.CI_RENKU_VALUES }}
          RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
          TEST_ARTIFACTS_PATH: "tests-artifacts-${{ github.sha }}"
          renku: "@${{ github.head_ref }}"
          renku_core: "${{ needs.check-deploy.outputs.renku-core }}"
          renku_gateway: "${{ needs.check-deploy.outputs.renku-gateway }}"
          renku_graph: "${{ needs.check-deploy.outputs.renku-graph }}"
          renku_notebooks: "${{ needs.check-deploy.outputs.renku-notebooks }}"
          renku_ui: "${{ needs.check-deploy.outputs.renku-ui }}"
          extra_values: "${{ needs.check-deploy.outputs.extra-values }}"
      - name: Check existing renkubot comment
        if: needs.check-deploy.outputs.pr-contains-string == 'true'
        uses: peter-evans/find-comment@v2
        id: findcomment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "RenkuBot"
      - name: Create comment pre deploy
        if: "steps.findcomment.outputs.comment-id == 0 &&
          needs.check-deploy.outputs.pr-contains-string == 'true'"
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            You can access the deployment of this PR at https://ci-renku-${{ github.event.number }}.dev.renku.ch

  test-pr:
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed' &&
      needs.check-deploy.outputs.pr-contains-string == 'true' &&
      needs.check-deploy.outputs.test-enabled == 'true' }}
    needs: [check-deploy, deploy-pr]
    steps:
      - uses: SwissDataScienceCenter/renku-actions/test-renku@v1.4.5
        with:
          kubeconfig: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
          renku-release: ci-renku-${{ github.event.number }}
          gitlab-token: ${{ secrets.DEV_GITLAB_TOKEN }}
          persist: "${{ needs.check-deploy.outputs.persist }}"
          s3-results-access-key: ${{ secrets.ACCEPTANCE_TESTS_BUCKET_ACCESS_KEY }}
          s3-results-secret-key: ${{ secrets.ACCEPTANCE_TESTS_BUCKET_SECRET_KEY }}
          test-timeout-mins: "120"

  test-pr-cypress:
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed' &&
      needs.check-deploy.outputs.pr-contains-string == 'true' &&
      (needs.check-deploy.outputs.test-enabled == 'true' ||
      needs.check-deploy.outputs.test-cypress-enabled == 'true') }}
    needs: [check-deploy, deploy-pr]
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        name: Run Cypress acceptance tests
        id: cypress
        env:
          TEST_EMAIL: renku@datascience.ch
          TEST_PASSWORD: ${{ secrets.RENKU_BOT_DEV_PASSWORD }}
          TEST_FIRST_NAME: Renku
          TEST_LAST_NAME: Bot
          TEST_USERNAME: renku-test
          BASE_URL: https://ci-renku-${{ github.event.number }}.dev.renku.ch
        with:
          browser: chrome
          working-directory: cypress-tests
      # NOTE: cypress screenshots will be generated only if the test failed
      # thus we store screenshots only on failures
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Cypress acceptance tests - screenshots
          path: cypress-tests/cypress/screenshots
          retention-days: 7
      # Cypress test video is always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Cypress acceptance tests - videos
          path: cypress-tests/cypress/videos
          retention-days: 3

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-20.04
    steps:
      - name: renku teardown
        uses: SwissDataScienceCenter/renku-actions/cleanup-renku-ci-deployments@v1.4.5
        env:
          HELM_RELEASE_REGEX: "^ci-renku-${{ github.event.number }}$"
          GITLAB_TOKEN: ${{ secrets.DEV_GITLAB_TOKEN }}
          RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_DEV_KUBECONFIG }}
          MAX_AGE_SECONDS: 0
          DELETE_NAMESPACE: "true"
