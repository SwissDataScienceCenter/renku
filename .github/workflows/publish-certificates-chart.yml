name: Publish certificates helm chart

on:
  push:
    tags: ["*"]
  workflow_dispatch:

jobs:
  publish-chart:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - uses: azure/setup-helm@v1
        name: Setup helm
        with:
          version: v3.5.2
      - name: Publish chart
        env:
          # CHART_DIR: helm-chart
          # CHART_NAME: renku
          GIT_USER: chart-bot
          GIT_EMAIL: chart-bot@example.com
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.RENKU_CI_TOKEN }}
        run: |
          set -xe

          pip3 install -U pip chartpress==0.7.0

          if echo $GITHUB_REF | grep "tags" - > /dev/null; then
            CHART_TAG="--tag $(echo ${GITHUB_REF} | cut -d/ -f3)"
          fi

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "GITHUB_TOKEN must be set."
            exit 1
          fi

          if [ -z "$GIT_EMAIL" ]; then
            echo "GIT_EMAIL must be set."
            exit 1
          fi

          if [ -z "$GIT_USER" ]; then
            echo "GIT_USER must be set."
            exit 1
          fi

          if [ ! -z "$IMAGE_PREFIX" ]; then
            IMAGE_PREFIX="--image-prefix ${IMAGE_PREFIX}"
          fi

          # set up git
          git config --global user.email "$GIT_EMAIL"
          git config --global user.name "$GIT_USER"

          cd helm-chart
          helm dep update ./certificates

          # log in to docker
          echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin

          # build and push the chart and images
          chartpress --push --publish-chart $CHART_TAG $IMAGE_PREFIX
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: job,ref
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_JOB} version ${{ steps.vars.outputs.tag }}: ${{ job.status }}.`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
