---
{{- $tokenRepository := default (randAlphaNum 32) .Values.graph.tokenRepository.aesEncryptionKey | b64enc | quote -}}
{{- $webhookAesEncryptionKey := default (randAlphaNum 32) .Values.graph.webhookService.aesEncryptionKey | b64enc | quote -}}

{{/* If this secret already exist just re-use it */}}
{{- $secretName := include "renku.graph.dbEncryptionSecret.name" . -}}
{{- $graphEncKeys := lookup "v1" "Secret" .Release.Namespace $secretName -}}
{{- if $graphEncKeys -}}
  {{- $tokenRepository = index $graphEncKeys.data "tokenRepository-aes-encryption-key" -}}
  {{- $webhookAesEncryptionKey = index $graphEncKeys.data "webhook-aes-encryption-key" -}}
{{/* If it doesn't exist check if it's in the previous form or in the values */}}
{{- else -}}
  {{- $secretName := include "renku.graph.tokenRepository.fullname" . -}}
  {{- $oldTokenSecret := lookup "v1" "Secret" .Release.Namespace $secretName -}}
  {{- if $oldTokenSecret -}}
    {{- $newTokenSecret :=  index $oldTokenSecret.data "tokenRepository-tokenEncryption-secret" | b64dec | b64dec | trim -}}
    {{/* If a secret has been specified in the values make sure that corresponds to the base64-decoded secret already present in the cluster, or fail */}}
    {{- if and .Values.graph.tokenRepository.aesEncryptionKey (ne $newTokenSecret .Values.graph.tokenRepository.aesEncryptionKey) -}}
       {{- fail (printf "The token repository AES encryption key provided in `graph.tokenRepository.aesEncryptionKey` does not match with the base64 decoded key present in %s. %s != %s" $secretName $newTokenSecret .Values.graph.tokenRepository.aesEncryptionKey) -}}
    {{- else -}}
      {{- $tokenRepository = $newTokenSecret | b64enc | quote -}}
    {{- end -}}
  {{- end -}}

  {{- $secretName := include "renku.graph.webhookService.fullname" . -}}
  {{- $oldWebhookSecret := (lookup "v1" "Secret" .Release.Namespace $secretName) -}}
  {{- if $oldWebhookSecret -}}
    {{- $newWebhookSecret := index $oldWebhookSecret.data "webhookService-hookToken-secret" | b64dec | b64dec | trim -}}
    {{/* If a secret has been specified in the values make sure that corresponds to the base64-decoded secret already present in the cluster, or fail */}}
    {{- if and .Values.graph.webhookService.aesEncryptionKey (ne $newWebhookSecret .Values.graph.webhookService.aesEncryptionKey) -}}
      {{- fail (printf "The webhook AES encryption key provided in `.graph.webhookService.aesEncryptionKey` does not match with the base64 decoded key present in %s. $secretName %s != %s" $secretName $newWebhookSecret .Values.graph.webhookService.aesEncryptionKey) -}}
    {{- else -}}
      {{- $webhookAesEncryptionKey = $newWebhookSecret | b64enc | quote -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{/* Make sure that the secrets are set in the correct value.*/}}
{{- if .Values.graph.tokenRepository.tokenEncryption -}}
{{- fail "The value `graph.tokenRepository.tokenEncryption.secret` is deprecated. Please move it to `graph.tokenRepository.aesEncryptionKey` base64 decoded." -}}
{{- end -}}
{{- if .Values.graph.webhookService.hookToken -}}
{{- fail "The value `graph.webhookService.hookToken.secret` is deprecated. Please move it to `graph.webhookService.aesEncryptionKey` base64 decoded." -}}
{{- end -}}

apiVersion: v1
kind: Secret
metadata:
  name: {{ template "renku.graph.dbEncryptionSecret.name" . }}
  labels:
    app: {{ template "renku.name" . }}
    chart: {{ template "renku.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade,pre-rollback"
type: Opaque
data:
  tokenRepository-aes-encryption-key: {{ $tokenRepository }}
  webhook-aes-encryption-key: {{ $webhookAesEncryptionKey }}
