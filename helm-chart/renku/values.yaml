## Default values for renku.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Global variables
## Shared values/secrets
global:
  ## This section is used to store common GitLab-related values referred in Renku components
  gitlab:
    ## Spawn a gitlab instance
    enabled: true
    ## The URL path under which gitlab is running.
    ## If GitLab is deployed along side with Renku, it should be equal to 'https://gitlab.'<global.renku.domain>
    url:
    ## The URL path for the registry that hosts the docker images.
    ## If GitLab is deployed along side with Renku, it should be equal to 'https://registry.gitlab.'<global.renku.domain>
    registryHost:
    ## The gitlab application ID and secret for Renku
    appSecret:
    appId: renku
    ## Name of the postgres database to be used by Gitlab
    postgresDatabase: gitlabhq_production
    ## Postgres user for the gitlab database
    postgresUser: gitlab
    ## Postgres password for the gitlab database
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false
  keycloak:
    ## Secret of the gitlab client app in keycloak. Only needed if gitlab is deployed as part of Renku
    ## and thus relies on keycloak for authentication. To change this value after deploying, first
    ## generate a new secret using the Keycloak admin console then paste the generated secret here and redeploy.
    gitlabClientSecret:  # use `uuidgen -r`
    ## Name of the postgres database to be used by Keycloak
    postgresDatabase: keycloak
    ## Postgres user for the Keycloak database
    postgresUser: keycloak
    ## Postgres password for the Keycloak database
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false
    ## Admin username/password for Keycloak
    user: admin
    password:
      value:
      overwriteOnHelmUpgrade: false
  jupyterhub:
    ## Name of the postgres database to be used by jupyterhub
    postgresDatabase: jupyterhub
    ## Postgres user for the jupyterhub database
    postgresUser: jupyterhub
    ## Postgres password for the jupyterhub database
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false
  gateway:
    ## The client secret for the renku client application registered in keycloak.
    clientSecret: # use `uuidgen -r`
    ## The client secret for the renku-cli client application registered in keycloak.
    cliClientSecret: # use `uuidgen -r`
    ## The client ID for authentication against gitlab
    gitlabClientId: renku-ui
    ## The client secret for authentication against gitlab
    gitlabClientSecret:
  renku:
    ## Domain name for the deployed instance of renku
    domain: example.local
    ## Renku version to be used (currently for project creation in
    ## the UI) If not set explicitly the version will be picked up
    ## from the respective renku (sub)chart.
    version: 0.4.0
  ## Note that the graph will not turned on by default until renku 0.4.0
  graph:
    dbEventLog:
      ## Name of the postgres user to be used to access the Event Log db
      postgresUser: eventlog
      ## Postgres password to be used to access the Event Log db
      postgresPassword:
        value:
        overwriteOnHelmUpgrade: false
      existingSecret: '{{ template "renku.fullname" . }}-db-postgres'
    tokenRepository:
      ## Name of the postgres user to be used to access the db storing access tokens
      postgresUser: tokenstorage
      ## Postgres password to be used to access the db storing access tokens
      postgresPassword:
        value:
        overwriteOnHelmUpgrade: false
      existingSecret: '{{ template "renku.fullname" . }}-token-postgres'
    jena:
      ## specify which dataset should be used in Jena
      dataset:
  ## Set to true if using https
  useHTTPS: false
  anonymousSessions:
    ## Set to true to enable anonymous sessions through
    ## a secondary Jupyterhub instance
    enabled: false
    ## Set the postgres password for you secondary JH deployment
    ## or force the (re)generation of it on helm upgrade.
    postgresPassword:
      value:
      overwriteOnHelmUpgrade: false

  ## Global section of GitLab, not needed for external GitLab
  edition: ce
  hosts:
    ## Domain name for the deployed instance of Gitlab (can use the same as Renku)
    ## This will yield a GitLab deployment under gitlab.example.local
    domain:
    ## ExternalIP of where the above domain points to
    externalIP:
    https: true
  psql:
    host: '{{ template "renku.fullname" . }}-postgres'
    password:
      ## secret: '{{ template "renku.fullname" . }}-postgresql-password'
      key: gitlab-postgres-password
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-production
    configureCertmanager: false
    enabled: true
    tls:
      enabled: true
  time_zone: CET
  appConfig:
    # OmniAuth Settings for using Renku's Keycloak as an auth provider
    # https://gitlab.com/gitlab-org/charts/gitlab/-/blob/master/doc/charts/globals.md#omniauth
    # Openid connect reference
    # https://docs.gitlab.com/ee/administration/auth/oidc.html
    omniauth:
      ## enabled: false
      enabled: true
      autoSignInWithProvider: openid_connect
      # User accounts will be created automatically when authentication was successful.
      allowSingleSignOn: ['openid_connect']
      blockAutoCreatedUsers: false
      providers:
       - secret: renku-oauth-provider
         key: provider
  ##  lfs:
    ##  enabled: true
    ##  proxy_download: false
    ##  bucket: renku-lfs-objects
    ##  connection:
    ##    secret: gitlab-s3-buckets
    ##    key: lfs-s3-bucket
    ##    secretContent:
    ##      provider: 'AWS'
    ##      endpoint: 'https://<fill-endpoint>'
    ##      aws_access_key_id: '<fill-key-id>'
    ##      aws_secret_access_key: '<fill-access-key>'
    ##      aws_signature_version: 2
    ##      path_style: true

## Ingress configuration
## See: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  ## Enables the creation of an ingress
  enabled: false

  ## Annotations for the created ingress
  annotations:
    ## The ingress class
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: '0' # Adjust to a reasonable value for production to avoid DOS attacks.
    nginx.ingress.kubernetes.io/proxy-request-buffering: 'off' # Needed if GitLab is behind this ingress
    nginx.ingress.kubernetes.io/proxy-buffer-size: '8k' # Default is 4k, larger size necessary for keycloak

  ## Hosts for the ingress
  ## Should include at least the value from `global.renku.domain`
  hosts:
    - example.local

  ## TLS setting for the ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - example.local

## Keycloak configuration
keycloak:

  ## Spawn a keycloak instance
  enabled: true

  postgresql:
    # Disable PostgreSQL dependency
    enabled: false

  extraEnv: |
    - name: DB_VENDOR
      value: postgres
    - name: DB_PORT
      value: "5432"
    - name:  PROXY_ADDRESS_FORWARDING
      value: "true"


  # The following environment variables are provided to keycloak
  # as extraEnvFrom secrets.

  # renku-keycloak-postgres
  # - DB_ADDR: database host                            value: <RELEASE-NAME>-postgresql
  # - DB_DATABASE: database name for keycloak           value: global.keycloak.postgresDatabase
  # - DB_USER: database username for keycloak database  value: global.keycloak.postgresUser
  # - DB_PASSWORD: database password for keycloak       value: global.keycloak.postgresPassword.value
  # keycloak-password-secret
  # - KEYCLOAK_USER: keyclaok admin username            value: global.keycloak.user
  # - KEYCLOAK_PASSWORD: keycloak admin password        value: global.keycloak.password.value

  extraEnvFrom: |
    - secretRef:
        name: renku-keycloak-postgres
    - secretRef:
        name: keycloak-password-secret

  extraVolumeMounts: |
    - name: theme
      mountPath: /opt/jboss/keycloak/themes/renku-theme

  extraVolumes: |
    - name: theme
      emptyDir: {}


  ## Create a demo user in keycloak? Note that the password for the demo
  ## user must be queried from kubernetes (see the rendered NOTES.txt
  ## template which is shown after a successul deployment).
  createDemoUser: false

  ## This section points to an image used to create
  ## a Renku realm and initialize it with the necessary
  ## clients during deployment. It should not be necessary
  ## to modify these values. This step is omitted if no
  ## keycloak admin username/password is supplied.
  initRealm:
    image:
      repository: renku/init-realm
      tag: 'latest'

  ## Skip Keycloak testing when running Helm test
  test:
    enabled: false

  extraInitContainers: |
    - name: theme-provider
      image: renku/keycloak-theme:v1.2
      imagePullPolicy: IfNotPresent
      command:
        - sh
      args:
        - -c
        - |
          echo "Copying theme..."
          cp -Rfv /renku_theme/* /theme
      volumeMounts:
        - name: theme
          mountPath: /theme


  ingress:
    enabled: false


# Postgresql configuration
# The bitnami postgres chart offers a variety of configuration options, most of
# which are not explicitly mentioned here. We predominantly list the values where we
# deviate from the defaults or where we expect the some deployment specific values
# to be set. For all options and their defaults see:
# https://github.com/bitnami/charts/tree/master/bitnami/postgresql#parameters
# For production deployments check out
# https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values-production.yaml
postgresql:
  enabled: true

  ## We use the defaults here. Note that these basic configs could also be set as
  ## global values such that sub-charts can access them too.
  postgresqlDatabase: postgres
  postgresqlUsername: postgres

  ## The admin password should be set explicitly, otherwise a random string will be
  ## created. Alternatively an existing secret can be provided. Note that postgres
  ## DOES NOT tolerate a change of the admin password when upgrading.
  # postgresqlPassword:

  ## Use an existing secret instead of creating a new one. It must have a
  ## postgresql-password key containing the password for the posgres user.
  # existingSecret:

  image:
    repository: bitnami/postgresql
    tag: 11.11.0

  persistence:
    ## We use the defaults here, but they will probably be modified for most deployments.
    enabled: true
    size: 8Gi
    ## Provide an existing PersistentVolumeClaim to be reused.
    # existingClaim:

  # Consider replication. These are the defaults for the basic settings.
  replication:
    enabled: false
    user: repl_user
    password: repl_password # generate a random password `openssl rand -hex 32`
    slaveReplicas: 1


## Gitlab configuration
gitlab:
  ## Spawn a gitlab instance
  enabled: true
  postgresql:
    install: false
  certmanager:
    install: false
  nginx-ingress:
    enabled: false
  prometheus:
    install: false

## Configuration for the UI service
ui:

  ## Configuration for Renku templates
  templates:
    custom: true
    repositories:
      - url: https://github.com/SwissDataScienceCenter/renku-project-template
        ref: 0.1.21
        name: Renku
      - url: https://github.com/SwissDataScienceCenter/contributed-project-templates
        ref: 0.2.0
        name: Community

  #  welcomePage:
  #    text: "## Some markdown text here!"
  ## UI image
  # image:
  #   pullPolicy: Always
  #   repository: renku/renku-ui
  #   tag: latest

  ## Pod affinity for UI deployment
  # affinity: {}
  ## Node selector for UI deployment
  # nodeSelector: {}
  ## Pod tolerations for UI deployment
  # tolerations: []

  ## Replica count
  # replicaCount: 1

  ## Service configuration for UI
  ## Modify service.type according to your setup
  # service:
  #   port: 80
  #   type: ClusterIP

  ## Privacy settings allow to configure the content of a Privacy Page through a configMap
  ## and to show a banner to comply with privacy related laws
  # privacy:
  #   enabled: true
  #   page:
  #     enabled: true
  #     configMapName: privacy-page
  #     configMapKey: privacy_statement
  #   banner:
  #     content: |
  #       This website requires cookies in order to ensure basic functionality. Further details
  #       in our <u><a class="text-white" href="/privacy">Privacy Policy</a></u>.
  #     layout:
  #       disableStyles: true
  #       containerClasses: fixed-bottom p-3 bg-dark
  #       contentClasses: text-white small
  #       buttonClasses: btn btn-sm btn-light mr-2
  #       buttonWrapperClasses: mt-2
  ## Configuration for Sentry
  # sentry:
  #   enabled: false
  #   url: ''
  #   namespace: ''

  ## Configuration for statuspage.io integration
  # statuspage:
    ## Provide the id for the statuspage, which is the subdomain of statuspage.io
    ## used in the API queries. This can be found from the /api path.
    ## E.g., under https://renkulab.statuspage.io/api you see that summary
    ## is available under https://5bcn9bqff4qt.statuspage.io/api/v2/summary.json, so
    # id: 5bcn9bqff4qt

# ## Configuration for the notebooks service
notebooks:
  ## serverOptions allow for modifications to the notebook pod resource requests and the UI rendering
  # serverOptions:
  #   defaultUrl:
  #     order: 1
  #     displayName: Default Environment
  #     type: enum
  #     default: /lab
  #     options: [/lab]
  #   cpu_request:
  #     order: 2
  #     displayName: Number of CPUs
  #     type: enum
  #     default: 0.5
  #     options: [0.5, 1.0]
  #   mem_request:
  #     order: 3
  #     displayName: Amount of Memory
  #     type: enum
  #     default: 1G
  #     options: [1G, 2G]
  #   gpu_request:
  #     order: 4
  #     displayName: Number of GPUs
  #     type: enum # use "type: int" instead to get a slider
  #     default: 0
  #     options: [0, 0] # use "range: [x, y]" when type is int
  #   lfs_auto_fetch:
  #     order: 5
  #     displayName: Automatically fetch LFS data
  #     type: boolean
  #     default: false
  ## image registry host
  # imageRegistry:
  ## JupyterHub setup
  jupyterhub:
    ## Configure rbac
    # rbac:
    #   enabled: true
    hub:
      ## Base path under which Jupyterhub is running, note the trailing slash!
      baseUrl: /jupyterhub/

      ## Secret used for signing JH cookies. Must be explicitly set, otherwise all
      ## users are logged out whenever the hub pod is recreated!
      ## See https://zero-to-jupyterhub.readthedocs.io/en/latest/reference/reference.html#hub-cookiesecret
      cookieSecret: # `openssl rand -hex 32`

      services:
        ## Set the notebooks service API token
        # notebooks:
        #   api_token: notebookstoken

        ## define the client ID and secret for the gateway
        gateway:
          oauth_no_confirm: true
        #  oauth_client_id: gateway
        #  apiToken: # use `openssl rand -hex 32`
        #  oauth_redirect_uri: http://<gateway>/api/auth/jupyterhub/token
        ## Configure gitlab and postgres:
        ## Values need to be set to get jupyterhub to work
        # extraEnv:
        #  - name: GITLAB_URL
        #    value: <gitlab url>
        #  - name: DEBUG
        #    value: "1"
        #  - name: JUPYTERHUB_SPAWNER_CLASS
        #    value: spawners.RenkuKubeSpawner
        #  - name: PGPASSWORD
        #    valueFrom:
        #        secretKeyRef:
        #          name: renku-jupyterhub-postgres
        #          key: jupyterhub-postgres-password

    proxy:
      ## Must be set explicitly, generate using `openssl rand -hex 32`
      secretToken:

    ## Configure Jupyterhub to use GitLab as OAuth2 provider
    auth:
    #   type: gitlab
    #   gitlab:
    #     clientId: renku
    #     clientSecret: dummy-secret
    #     callbackUrl:  # Null value forces the default callback url

    ## Store encrypted auth state in the JH db (enabled by default).
    ## Key for encryption must be set explicitly!
    ## See https://zero-to-jupyterhub.readthedocs.io/en/latest/reference/reference.html?highlight=cryptokey#auth-state
      state:
        # enabled: true
        cryptoKey: # `openssl rand -hex 32`

    ## Configure idle pod culling
    # cull:
    #   enabled: true
    #   timeout: 86400
    #   every: 60
    singleuser:
      image:
        name: renku/renkulab-py
        tag: 3.7-renku0.10.4-0.6.3
    #   # use JupyterLab by default in notebook servers
    #   defaultUrl: /lab

    # By default Renku notebooks disables some of the default JupyterHub
    # optimizations which can interfere with simple setups. See
    # https://zero-to-jupyterhub.readthedocs.io/en/latest/administrator/optimization.html
    # for details. You can re-enable this by uncommenting the following section
    # scheduling:
    #   userScheduler:
    #     enabled: true
    #   userPlaceholder:
    #     enabled: true
    # prePuller:
    #   continuous:
    #     enabled: true

tests:
  enabled: false
  image:
    repository: renku/tests
    tag: 'latest'
  ## User account for running `helm test`
  #parameters:
  #  email: bwayne@example.com
  #  username: bwayne
  #  fullname: Bruce Wayne
  #  password: IamBatman
  #  provider:
  #  register:
  #  docsRun:
  #  extantProject:
  #  anonProject:
  #  anonAvailable: false
  #  batchRemove: false
  #  removePattern:
  #  testTarget:
  resultsS3:
    enabled: false
  #  host:
  #  bucket:
  #  filename:
  #  accessKey:
  #  secretKey:

## Configuration for the Gateway service
gateway:
  ingress:
    enabled: false
  ## Uncomment this if you are using a GitLab version
  ## prior to 12.7.0.
  # oldGitLabLogout: true

## Configuration for renku-graph
graph:
  ## Enable/disable the graph - enabled by default since renku 0.4.0
  enabled: true
  ## Configuration for Apache Jena
  # jena:
  #   users:
  #     ## Set the admin password
  #     admin:
  #       password: 1234
  #     ## Password for graph service queries
  #     renku:
  #       password: 5678

  gitlab:
    url:

  # tokenRepository:
  #   ## A secret for signing access tokens stored in the database
  #   ## Generated using: `openssl rand -hex 8|base64`
  #   tokenEncryption:
  #     secret: 1234

  # webhookService:
  #   hookToken:
  #     ## A secret for signing request header tokens to be sent by GitLab with the Push Events
  #     ## Generated using: `openssl rand -hex 8|base64`
  #     secret: 1234

## Configuration for renku-core service
core:
  # increase the TTL of projects in cache due to a bug in cleanup - will be fixed in 0.12.1
  cleanupProjectsTTL: 21600
  cleanupFilesTTL: 21600
  # repository:
    ## Default cache directory
    # cacheDirectory: /svc/cache

    ## Default clone depth
    # projectCloneDepth: 1

## Configuration for the Swagger-UI available at <renku-domain>/swagger
swagger:
  enabled: true
