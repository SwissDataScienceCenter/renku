affinity: {}
amalthea:
  deployCrd: true
  scope:
    clusterWide: false
core:
  apiBasePath: /api
  cacheDirectory: /svc/cache
  cleanupFilesTTL: 1800
  cleanupInterval: 60
  cleanupProjectsTTL: 1800
  datasetsWorkerQueues: datasets.jobs,delayed.ctrl.DatasetsCreateCtrl,delayed.ctrl.DatasetsAddFileCtrl,delayed.ctrl.DatasetsRemoveCtrl,delayed.ctrl.DatasetsImportCtrl,delayed.ctrl.DatasetsEditCtrl,delayed.ctrl.DatasetsUnlinkCtrl
  fullnameOverride: ""
  gitLFSSkipSmudge: 1
  horizontalPodAutoscaling:
    averageMemoryUtilization: 50
    maxReplicas: 10
    minReplicas: 2
  imagePullSecrets: []
  jwtTokenSecret: bW9menZ3cnh6cWpkcHVuZ3F5aWJycmJn
  logLevel: INFO
  managementWorkerQueues: cache.cleanup.files,cache.cleanup.projects,delayed.ctrl.MigrateProjectCtrl,delayed.ctrl.SetConfigCtrl
  maximumUploadSizeBytes: "1073741824"
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      repository: renku/rqmetrics
      tag: 0.0.2
  nThreads: 8
  nWorkers: 4
  nameOverride: ""
  projectCloneDepth: 1
  requestTimeout: 600
  resources:
    core: {}
    datasetsWorkers: {}
    managementWorkers: {}
    rqmetrics: {}
    scheduler: {}
  sentry:
    dsn: null
    enabled: false
    environment: null
    sampleRate: 0.2
  service:
    port: 80
    type: ClusterIP
  templateCloneDepth: 1
dataService:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 5
    minReplicas: 2
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  image:
    pullPolicy: IfNotPresent
    repository: renku/renku-data-service
    tag: 0.2.3
  nodeSelector: {}
  podAnnotations: {}
  replicaCount: 2
  resources: {}
  service:
    port: 80
    type: ClusterIP
  tolerations: []
  updateStrategy: {}
dlf-chart:
  csi-h3-chart:
    enabled: false
  csi-nfs-chart:
    enabled: false
  csi-s3-chart:
    enabled: true
    mounter: goofys
  csi-sidecars-rbac:
    enabled: true
  dataset-operator-chart:
    enabled: true
gateway:
  allowOrigin: null
  development: false
  image:
    auth:
      pullPolicy: IfNotPresent
      repository: renku/renku-gateway
      tag: 0.23.0
  logoutGitLabUponRenkuLogout: true
  oldGitLabLogout: false
  rateLimits:
    general:
      average: 20
      burst: 100
      enabled: false
  replicaCount: 1
  resources: {}
  reverseProxy:
    autoscaling:
      enabled: false
      maxReplicas: 5
      minReplicas: 2
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75
    image:
      pullPolicy: IfNotPresent
      repository: renku/renku-revproxy
      tag: 0.23.0
    metrics:
      enabled: true
      port: 8765
    podAnnotations: {}
    replicaCount: 2
    resources: {}
    updateStrategy: {}
  secretKey: null
  sentry:
    dsn: null
    enabled: false
    environment: null
    sampleRate: 0.1
  service:
    port: 80
    type: ClusterIP
gitlab:
  demoUserIsAdmin: false
  enabled: true
  image:
    repository: gitlab/gitlab-ce
    tag: 14.10.5-ce.0
  oauth:
    autoSignIn: true
  password: gitlabadmin
  persistence:
    size: 30Gi
  registry:
    enabled: false
  sharedRunnersRegistrationToken: null
global:
  anonymousSessions:
    enabled: false
  certificates:
    customCAs: []
    image:
      repository: renku/certificates
      tag: 0.0.2
  core:
    versions:
      latest:
        fullnameOverride: ""
        image:
          pullPolicy: IfNotPresent
          repository: renku/renku-core
          tag: v2.8.0
        name: v10
        nameOverride: ""
        prefix: "10"
      v9:
        fullnameOverride: ""
        image:
          pullPolicy: IfNotPresent
          repository: renku/renku-core
          tag: v1.11.4
        name: v9
        nameOverride: ""
        prefix: "9"
  db:
    common:
      passwordSecretName: renku-db-common-password
      username: renku
  externalServices:
    postgresql:
      enabled: false
      username: postgres
  gateway:
    cliClientSecret: null
    clientSecret: null
    gitlabClientId: renku-ui
    gitlabClientSecret: null
  gitlab:
    clientSecret: null
    postgresDatabase: gitlabhq_production
    postgresPassword:
      value: null
    postgresUser: gitlab
  graph:
    dbEventLog:
      existingSecret: null
      postgresPassword:
        value: null
      postgresUser: eventlog
    jena:
      dataset: null
    tokenRepository:
      existingSecret: null
      postgresPassword:
        value: null
      postgresUser: tokenstorage
    triplesGenerator:
      existingSecret: null
      postgresPassword:
        value: null
      postgresUser: triplesgenerator
  keycloak:
    password:
      value: null
    postgresDatabase: keycloak
    postgresPassword:
      value: null
    postgresUser: keycloak
    realm: null
    url: null
    user: admin
  redis:
    clientLabel:
      renku-redis-client: "true"
    dbIndex:
      coreService: "1"
      gateway: "0"
      uiServer: "2"
    existingSecret: redis-secret
    existingSecretPasswordKey: redis-password
    host: renku-redis
    port: 26379
    sentinel:
      enabled: true
      masterSet: mymaster
  renku:
    cli_version: null
    domain: example.local
    version: 0.4.0
  uiserver:
    clientSecret: null
  useHTTPS: false
graph:
  commitEventService:
    gitlab:
      rateLimit: 10/sec
    image:
      pullPolicy: IfNotPresent
      repository: renku/commit-event-service
      tag: 2.45.0
    jvmXmx: 128M
    resources:
      requests:
        memory: 384Mi
    service:
      port: 9006
      type: ClusterIP
  eventLog:
    connectionPool: 10
    gitlab:
      rateLimit: 10/sec
    image:
      pullPolicy: IfNotPresent
      repository: renku/event-log
      tag: 2.45.0
    jvmXmx: 256M
    resources:
      requests:
        memory: 512Mi
    service:
      port: 9005
      type: ClusterIP
  knowledgeGraph:
    gitlab:
      rateLimit: 100/sec
    image:
      pullPolicy: IfNotPresent
      repository: renku/knowledge-graph
      tag: 2.45.0
    jvmXmx: 256M
    replicas: 1
    resources:
      requests:
        memory: 512Mi
    service:
      port: 80
      type: ClusterIP
    services:
      renku:
        resourcesPath: /knowledge-graph
  persistence:
    accessMode: ReadWriteOnce
    enabled: true
    size: 2Gi
  sentry:
    dsn: ""
    enabled: false
    environment: ""
    sentryDsnRenkuPython: ""
  tokenRepository:
    connectionPool: 2
    gitlab:
      rateLimit: 50/sec
    image:
      pullPolicy: IfNotPresent
      repository: renku/token-repository
      tag: 2.45.0
    jvmXmx: 128M
    projectTokenDuePeriod: 184 days
    projectTokenName: null
    projectTokenTTL: 365 days
    resources:
      requests:
        cpu: 500m
        memory: 256Mi
    service:
      port: 9003
      type: ClusterIP
    tokenEncryption:
      secret: null
  triplesGenerator:
    connectionPool: 5
    generationProcessesNumber: 2
    gitlab:
      rateLimit: 30/sec
    image:
      pullPolicy: IfNotPresent
      repository: renku/triples-generator
      tag: 2.45.0
    jvmXmx: 1g
    renkuPythonDevVersion: null
    replicas: 1
    resources:
      requests:
        cpu: "1"
        memory: 2048Mi
    service:
      port: 9002
      type: ClusterIP
    transformationProcessesNumber: 2
  webhookService:
    gitlab:
      rateLimit: 100/sec
    hookToken:
      secret: null
    image:
      pullPolicy: IfNotPresent
      repository: renku/webhook-service
      tag: 2.45.0
    jvmXmx: 128M
    resources:
      requests:
        cpu: 500m
        memory: 256Mi
    service:
      port: 80
      type: ClusterIP
ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 8k
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
  className: ""
  enabled: false
  hosts:
  - example.local
  tls: []
initDb:
  image:
    repository: renku/init-db
    tag: latest
jena:
  additionalEnvironmentVariables:
  - name: JVM_ARGS
    value: -Xmx2G -Xms2G
  additionalInitContainerScript: find /fuseki -name tdb.lock -type f -delete && find
    /fuseki/configuration -name *.ttl -type f -empty -delete && echo clean-up done
  additionalVolumeMounts:
  - mountPath: /fuseki/shiro.ini
    name: shiro
    readOnly: true
    subPath: shiro.ini
  additionalVolumes:
  - configMap:
      defaultMode: 365
      name: shiro-ini
    name: shiro
  image:
    pullPolicy: IfNotPresent
    repository: renku/renku-jena
  persistence:
    accessModes:
    - ReadWriteOnce
    size: 10Gi
  resources:
    requests:
      cpu: 1000m
      memory: 3Gi
  test:
    enabled: false
  users:
    admin:
      password: null
    renku:
      password: null
keycloakx:
  command:
  - /opt/keycloak/bin/kc.sh
  - start
  - --http-enabled=true
  - --http-port=8080
  - --hostname-strict=false
  - --hostname-strict-https=false
  - --auto-build
  createDemoUser: false
  enabled: true
  extraEnv: |
    - name: KC_DB
      value: postgres
    - name: KC_DB_PORT
      value: "5432"
    - name:  PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: JAVA_OPTS_APPEND
      value: >-
        -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless
    - name: KC_DB_POOL_MAX_SIZE
      value: "10"
  extraEnvFrom: |
    - secretRef:
        name: renku-keycloak-postgres
    - secretRef:
        name: keycloak-password-secret
  extraInitContainers: |
    - name: theme-provider
      image: renku/keycloak-theme:4.1.2
      imagePullPolicy: IfNotPresent
      command:
        - sh
      args:
        - -c
        - |
          echo "Copying theme..."
          cp -Rfv /renku_theme/* /theme
      volumeMounts:
        - name: theme
          mountPath: /theme
    - name: init-certificates
      securityContext:
        allowPrivilegeEscalation: false
        runAsGroup: 65534
        runAsUser: 65534
      image: "registry.access.redhat.com/ubi8/ubi:8.4"
      command: ["sh", "-c"]
      args: ["mkdir -p /etc/pki/ca-trust/extracted/openssl/ /etc/pki/ca-trust/extracted/pem/ /etc/pki/ca-trust/extracted/java/ /etc/pki/ca-trust/extracted/edk2 && update-ca-trust"]
      volumeMounts:
        - name: etc-ssl-certs
          mountPath: /etc/pki/ca-trust/extracted
    {{- if .Values.global.certificates.customCAs }}
        - name: custom-ca-certs
          mountPath: /usr/share/pki/ca-trust-source/anchors
          readOnly: true
    {{- end -}}
  extraVolumeMounts: |
    - name: theme
      mountPath: /opt/keycloak/themes/renku-theme
    - name: etc-ssl-certs
      mountPath: /etc/pki/ca-trust/extracted
      readOnly: true
  extraVolumes: |
    - name: theme
      emptyDir: {}
    - name: etc-ssl-certs
      emptyDir:
        medium: "Memory"
    {{- if .Values.global.certificates.customCAs }}
    - name: custom-ca-certs
      projected:
        defaultMode: 0777
        sources:
        {{- range $customCA := .Values.global.certificates.customCAs }}
          - secret:
              name: {{ $customCA.secret }}
        {{- end -}}
    {{- end -}}
  ingress:
    enabled: false
  initRealm:
    image:
      repository: renku/init-realm
      tag: latest
  postgresql:
    enabled: false
  test:
    enabled: false
nodeSelector: {}
notebooks:
  autoscaling:
    enabled: false
    maxReplicas: 5
    minReplicas: 2
    targetCPUUtilizationPercentage: 50
  cloudstorage:
    azureBlob:
      enabled: false
      readOnly: true
    s3:
      enabled: false
      installDatashim: false
      readOnly: true
  culling:
    hibernatedSecondsThreshold:
      registered: 259200
    idleSecondsThreshold:
      anonymous: 43200
      registered: 86400
    maxAgeSecondsThreshold:
      anonymous: 0
      registered: 0
  debug: true
  defaultSessionImage: renku/renkulab-py:3.9-0.18.0
  dummyStores: false
  enforceCPULimits: "off"
  gitClone:
    image:
      name: renku/git-clone
      tag: 1.20.2
  gitHttpsProxy:
    image:
      name: renku/git-https-proxy
      tag: 1.20.2
  gitRpcServer:
    image:
      name: renku/git-rpc-server
      tag: 1.20.2
  gitlab:
    registry:
      host: null
    url: null
  image:
    pullPolicy: IfNotPresent
    repository: renku/renku-notebooks
    tag: 1.20.2
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - chart-example.local
    path: /
    tls: []
  k8sWatcher:
    autoscaling:
      enabled: false
      maxReplicas: 5
      minReplicas: 2
      targetCPUUtilizationPercentage: 50
    image:
      pullPolicy: IfNotPresent
      repository: renku/k8s-watcher
      tag: 1.20.2
    replicaCount: 1
    resources: {}
  oidc:
    allowUnverifiedEmail: false
    authUrl: null
    clientId: renku-jupyterserver
    clientSecret: null
    tokenUrl: null
  rbac:
    create: true
    serviceAccountName: default
  replicaCount: 2
  resources: {}
  sentry:
    dsn: null
    enabled: false
    environment: null
    sampleRate: 0.2
  serverDefaults:
    cpu_request: 0.5
    defaultUrl: /lab
    disk_request: 1G
    gpu_request: 0
    lfs_auto_fetch: false
    mem_request: 1G
  serverOptions:
    cpu_request:
      default: 0.5
      displayName: Number of CPUs
      options:
      - 0.5
      - 1
      order: 2
      type: enum
    defaultUrl:
      default: /lab
      displayName: Default Environment
      options:
      - /lab
      order: 1
      type: enum
    disk_request:
      default: 1G
      displayName: Amount of Storage
      options:
      - 1G
      - 10G
      order: 4
      type: enum
    gpu_request:
      default: 0
      displayName: Number of GPUs
      options:
      - 0
      order: 5
      type: enum
    lfs_auto_fetch:
      default: false
      displayName: Automatically fetch LFS data
      order: 6
      type: boolean
    mem_request:
      default: 1G
      displayName: Amount of Memory
      options:
      - 1G
      - 2G
      order: 3
      type: enum
  service:
    port: 80
    type: ClusterIP
  sessionAffinity: {}
  sessionAutosave:
    minimumLFSFileSizeBytes: 1000000
    terminationGracePeriodSeconds: 600
    terminationWarningDurationSeconds: 3600
  sessionIngress:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-buffer-size: 8k
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    host: null
    tlsSecret: null
  sessionNodeSelector: {}
  sessionSentry:
    gitClone:
      dsn: null
      enabled: false
      environment: null
      sampleRate: 0.2
    sidecar:
      dsn: null
      enabled: false
      environment: null
      sampleRate: 0.2
  sessionTolerations: []
  sessionsNamespace: null
  ssh:
    autoscaling:
      enabled: false
      maxReplicas: 3
      minReplicas: 1
      targetCPUUtilizationPercentage: 50
    enabled: false
    hostKeySecret: null
    image:
      pullPolicy: IfNotPresent
      repository: renku/ssh-jump-host
      tag: 1.20.2
    replicaCount: 1
    resources: {}
    service:
      port: 22
      type: ClusterIP
  tests:
    enabled: false
    gitlab_token: null
    image:
      pullPolicy: IfNotPresent
      repository: renku/renku-notebooks-tests
      tag: 1.20.2
    oidc_issuer: null
    sessionTypes:
    - registered
  userSessionPersistentVolumes:
    enabled: true
    useEmptyDirSizeLimit: false
podSecurityContext: {}
postgresql:
  enabled: true
  image:
    repository: bitnami/postgresql
    tag: 12.8.0
  persistence:
    enabled: true
    size: 8Gi
  postgresqlDatabase: postgres
  postgresqlUsername: postgres
  replication:
    enabled: false
    password: repl_password
    slaveReplicas: 1
    user: repl_user
redis:
  architecture: replication
  auth:
    commonConfiguration: |-
      # Disable AOF https://redis.io/topics/persistence#append-only-file
      appendonly no
      # Disable RDB persistence.
      save ""
    enabled: true
    existingSecret: redis-secret
    existingSecretPasswordKey: redis-password
    sentinel: true
  createSecret: true
  fullnameOverride: renku-redis
  install: true
  metrics:
    enabled: true
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
  networkPolicy:
    allowExternal: false
    enabled: true
  password: null
  replica:
    autoscaling:
      enabled: false
    persistence:
      enabled: false
    replicaCount: 3
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 256Mi
    updateStrategy:
      type: RollingUpdate
  sentinel:
    downAfterMilliseconds: 1000
    enabled: true
    failoverTimeout: 2000
    getMasterTimeout: 5
    quorum: 2
    resources:
      requests:
        cpu: 200m
        memory: 64Mi
    service:
      sentinel: 26379
  sysctl:
    enabled: false
securityContext:
  allowPrivilegeEscalation: false
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
swagger:
  enabled: true
tests:
  enabled: false
  image:
    repository: renku/tests
    tag: 0.36.3
  resources:
    requests:
      cpu: 500m
      ephemeral-storage: 3G
      memory: 3G
  resultsS3:
    enabled: false
tolerations: []
ui:
  client:
    affinity: {}
    canary:
      enabled: false
      image:
        repository: renku/renku-ui
        tag: 0.11.16
    coreApiVersionConfig:
      coreApiVersion: /
    dashboardMessage:
      additionalText: |
        ℹ️ Renku documentation: https://renku.readthedocs.io/en/stable/
      dismissible: true
      enabled: false
      style: info
      text: "# Welcome to Renku! \U0001F438\n\n✨This is an example welcome message.✨\n"
    homepage:
      custom:
        enabled: false
        main:
          backgroundImage:
            url: ""
          contentMd: |
            # Welcome to RenkuLab
      showcase:
        description: The case studies presented here **bridge the gap** from domain
          to data science and provide experts from both sides with the means to examine,
          confirm, and extend the datasets and their analyses, without extensive investments
          of time and infrastructure.
        enabled: false
        projects:
        - identifier: hdbi/data-management/cccooci
        - identifier: renku-ui-tests/stable-project
          overrideDescription: This is a project for **testing**. You may find it
            useful to look at.
          overrideImageUrl: https://gitlab.renkulab.io/uploads/-/system/project/avatar/36159/graphical_abstract.png
          overrideTitle: 'Stable Project: A project for testing'
        title: 'Renku real-world use cases: Conducted by SDSC and ETH Domain'
      tutorialLink: https://renku.readthedocs.io/en/stable/tutorials/01_firststeps.html
    image:
      pullPolicy: IfNotPresent
      repository: renku/renku-ui
      tag: 3.15.1
    ingress:
      enabled: false
    maintenance: false
    nodeSelector: {}
    podSecurityContext: {}
    previewSizeThreshold:
      hard: 10485760
      soft: 1048576
    privacy:
      banner:
        content: |
          This website requires cookies in order to ensure basic functionality. By clicking
          or navigating the site, you consent to the use of cookies in accordance with
          our <u><a class="text-white" href="/privacy">Privacy Policy</a></u>.
        layout:
          buttonClasses: btn btn-sm btn-light me-2
          buttonWrapperClasses: mt-2
          containerClasses: fixed-bottom p-3 bg-dark
          contentClasses: text-white small
          cookieName: RenkuLabPrivacy
          disableStyles: true
      enabled: false
      page:
        enabled: false
    replicaCount: 1
    resources: {}
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 101
    sentry:
      dsn: ""
      enabled: false
      environment: ""
      sampleRate: 0
    service:
      port: 80
      type: ClusterIP
    statuspage:
      id: ""
    templates:
      custom: true
      repositories:
      - name: Renku
        ref: 0.7.1
        url: https://github.com/SwissDataScienceCenter/renku-project-template
      - name: Community
        ref: 0.6.0
        url: https://github.com/SwissDataScienceCenter/contributed-project-templates
    tolerations: []
    uploadSizeThreshold:
      soft: 104857600
    url: null
  server:
    affinity: {}
    authentication:
      expirationTolerance: 10
      id: renku-ui
      url: null
    autoscaling:
      enabled: false
    fullnameOverride: ""
    image:
      pullPolicy: IfNotPresent
      repository: renku/renku-ui-server
      tag: 3.15.1
    imagePullSecrets: []
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - host: chart-example.local
        paths: []
      tls: []
    keepCookies: []
    nameOverride: ""
    nodeSelector: {}
    podSecurityContext: {}
    prometheus:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      enabled: true
    replicaCount: 1
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    securityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    sentry:
      debugMode: false
      dsn: ""
      enabled: false
      environment: ""
      sampleRate: 0
    service:
      port: 80
      type: ClusterIP
    serviceAccount:
      create: true
      name: ""
    tolerations: []
    url: null
    webSocket:
      enabled: true
versions:
  latest:
    image:
      tag: v2.8.0
