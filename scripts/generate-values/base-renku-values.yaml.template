---
global:
  gateway:
    cliClientSecret: <use `openssl rand -hex 32`>
    clientSecret: <use `openssl rand -hex 32`>
    gitlabClientSecret: <use `openssl rand -hex 32`>
  gitlab:
    urlPrefix: /
    clientSecret: <use `openssl rand -hex 32`>
  renku:
    domain: {renku_domain}
  uiserver:
    clientSecret: <use `openssl rand -hex 32`>
  useHTTPS: true
gateway:
  gitlabUrl: {gitlab_url}
  secretKey: <use `openssl rand -hex 32`>
gitlab:
  enabled: false
  password: <use `openssl rand -hex 32`>
  sharedRunnersRegistrationToken: <use `openssl rand -hex 32`>
  lfsObjects:
    enabled: false
    connection: {{}}
  registry:
    enabled: false
    externalUrl: https://registry.{renku_domain}
    storage: {{}}
    ingress:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/proxy-body-size: '0'
      hosts:
      - {gitlab_registry}
      tls:
      - hosts:
        - {gitlab_registry}
        secretName: registry-tls
graph:
  gitlab:
    url: {gitlab_url}
  jena:
    users:
      admin:
        password: <use `openssl rand -hex 8 | base64`>
      renku:
        password: <use `openssl rand -hex 8 | base64`>
  tokenRepository:
    tokenEncryption:
      secret: <use `openssl rand -hex 8 | base64`>
  webhookService:
    hookToken:
      secret: <use `openssl rand -hex 8 | base64`>
ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
  enabled: true
  hosts:
    - {renku_domain}
  tls:
    - hosts:
        - {renku_domain}
      secretName: {namespace}-renku-ch-tls
notebooks:
  amalthea:
    deployCrd: true
  gitlab:
    registry:
      host: {gitlab_registry}
    url: {gitlab_url}
  oidc:
    allowUnverifiedEmail: true
    authUrl: https://{renku_domain}/auth/realms/Renku/protocol/openid-connect/auth
    clientSecret: <use `openssl rand -hex 32`>
    tokenUrl: https://{renku_domain}/auth/realms/Renku/protocol/openid-connect/token
  sessionIngress:
    host: {renku_domain}
    tlsSecret: {namespace}-renku-ch-tls
  userSessionPersistentVolumes:
    enabled: false
postgresql:
  persistence:
    enabled: true
  postgresqlPassword: <use `openssl rand -hex 32`>
redis:
  password: <use `openssl rand -hex 32`>
ui:
  client:
    welcomePage:
      text: |
        ## Welcome to Renku!
        Renku is software for collaborative data science.
        With Renku you can share code and data, discuss problems and solutions, and coordinate data-science projects.
        ## Template
        I am templateable, so deployment specific information can be put here by
        changing ui.client.welcomePage.text in the values file.
